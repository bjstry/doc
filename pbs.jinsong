qmgr -c "set server default_queue=shuoxing"
设置默认队列为shuoxing

qmgr -c "create queue SIESTA queue_type=execution"
创建SIESTA队列，并且指定类型为execution
qmgr -c "set queue SIESTA started=true"
指定SIESTA队列中的任务可以被调度执行
qmgr -c "set queue SIESTA enabled=true"
指定SIESTA队列可以接受新的任务

qmgr -c "delete queue test"
删除队列test

qmgr -c "set queue SIESTA acl_group_enable=true"
指定SIESTA队列专属某一个用户组
qmgr -c "set queue SIESTA acl_groups=siesta"
指定SIESTA队列的专属用户组为siesta用户组，只有属于siesta用户组的用户才能向改队列中提交任务
qmgr -c "set queue SIESTA acl_group_sloppy=true"
指定是不是只看用户的第一用户组来决定对队列的使用权。如果该项没有，则只有第一用户组为siesta的用户组才能向该队列对提交任务，如果该项为true，表示检查用户的其他用户组属性。

qmgr -c "set queue SIESTA resources_default.neednodes=siesta"
指定SIESTA队列使用的计算节点是siesta属性的

qmgr -c "p s"查看创建的队列情况

qmgr -c "set queue batch acl_host_enable=true"
描述可提交作业的主机

qmgr -c "set queue batch acl_hosts=cu01+cu02"
描述一系列主机，可以通过该队列进行提交作业的

pbs串行程序：
#!/bin/bash
#PBS -N [taskname]
#PBS -q [username]_queue
#PBS -l nodes=1:ppn=1
#PBS -j oe
cd $PBS_O_WORKDIR
[program] >& [logfile]
#example:./test >& run.log



pbs_openmpi：
#!/bin/bash
#PBS -N [taskname]
#PBS -l nodes=[nodes]:ppn=[cores]
#example:#PBS -l nodes=1:ppn=1
#PBS -q [username]_queue
#PBS -j oe
nprocs=`cat $PBS_NODEFILE | wc -l`
cd $PBS_O_WORKDIR
mpirun -np $nprocs -machinefile $PBS_NODEFILE [program] >& [logfile]
#example:mpirun -np $nprocs -machinefile $PBS_NODEFILE ./test >& run.log



pbs_ansys：
#!/bin/bash
#PBS -N [taskname]
#PBS -l nodes=[nodes]:ppn=[cores]
#example:#PBS -l nodes=1:ppn=1
#PBS -q [username]_queue
#PBS -j oe
machines=`uniq -c $PBS_NODEFILE | awk '{printf ":"$2":"$1}'`
cd $PBS_O_WORKDIR
ansys130 -b -dis -pp -machines ${machines:1} -dir [workDir] -i [input] >& [logfile]
#example:ansys130 -b -dis -pp -machines ${machines:1} -dir ~/test -i commands >& run.log



pbs_fluent:
#!/bin/bash
#PBS -N [taskname]
#PBS -l nodes=[nodes]:ppn=[cores]
#example:#PBS -l nodes=1:ppn=1
#PBS -q [username]_queue
#PBS -j oe
nprocs=`cat $PBS_NODEFILE | wc -l`
cd $PBS_O_WORKDIR
fluent 3d -t$nprocs -cnf=$PBS_NODEFILE -g -pib -i [journalfile] >& [logfile]
#example:fluent 3d -t$nprocs -cnf=$PBS_NODEFILE -g -pib -i script.jou >& run.log



pbs_vnc:
#!/bin/sh
#PBS
########################################################
num=`echo ${PBS_JOBID} | cut -d. -f1`
export DISPLAY=:${num}.0
vncserver :$num
ipaddr=`/sbin/ifconfig eth0 | sed -n 2p | awk -F" +|:" '{print $4}'`
ssh 192.168.0.100 "/usr/bin/setipvs $ipaddr $num"
#########################################################
source /opt/env/ansys-flu-env-hp.sh
NP=`cat $PBS_NODEFILE|wc -l`
cat $PBS_NODEFILE > /tmp/nodefile.$$
/opt/software/ansys_inc/v121/fluent/bin/fluent  3d -t$NP -pib -mpi=hp  -cnf=/tmp/nodefile.$$
rm -f /tmp/nodefile.$$


pbs_matlib
#!/bin/bash                                                                     
#PBS -N matlab-test 
#PBS -q gentai
#PBS -l nodes=1:ppn=1
#PBS -j oe
cd $PBS_O_WORKDIR
matlab -nojvm -nodisplay -nosplash -nodesktop <my.m 1>runm.log 2>runm.err

#多机器分配
#PBS -l nodes=node02+node04:ppn=2
